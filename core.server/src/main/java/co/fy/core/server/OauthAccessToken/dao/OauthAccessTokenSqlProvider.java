package co.fy.core.server.OauthAccessToken.dao;

import co.fy.core.server.OauthAccessToken.model.OauthAccessTokenWithBLOBs;

import static org.apache.ibatis.jdbc.SqlBuilder.*;

public class OauthAccessTokenSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table oauth_access_token
     *
     * @mbggenerated Tue Dec 05 09:45:41 CST 2017
     */
    public String insertSelective(OauthAccessTokenWithBLOBs record) {
        BEGIN();
        INSERT_INTO("oauth_access_token");
        
        if (record.getAuthenticationId() != null) {
            VALUES("authentication_id", "#{authenticationId,jdbcType=VARCHAR}");
        }
        
        if (record.getTokenId() != null) {
            VALUES("token_id", "#{tokenId,jdbcType=VARCHAR}");
        }
        
        if (record.getUserName() != null) {
            VALUES("user_name", "#{userName,jdbcType=VARCHAR}");
        }
        
        if (record.getClientId() != null) {
            VALUES("client_id", "#{clientId,jdbcType=VARCHAR}");
        }
        
        if (record.getRefreshToken() != null) {
            VALUES("refresh_token", "#{refreshToken,jdbcType=VARCHAR}");
        }
        
        if (record.getToken() != null) {
            VALUES("token", "#{token,jdbcType=LONGVARBINARY}");
        }
        
        if (record.getAuthentication() != null) {
            VALUES("authentication", "#{authentication,jdbcType=LONGVARBINARY}");
        }
        
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table oauth_access_token
     *
     * @mbggenerated Tue Dec 05 09:45:41 CST 2017
     */
    public String updateByPrimaryKeySelective(OauthAccessTokenWithBLOBs record) {
        BEGIN();
        UPDATE("oauth_access_token");
        
        if (record.getTokenId() != null) {
            SET("token_id = #{tokenId,jdbcType=VARCHAR}");
        }
        
        if (record.getUserName() != null) {
            SET("user_name = #{userName,jdbcType=VARCHAR}");
        }
        
        if (record.getClientId() != null) {
            SET("client_id = #{clientId,jdbcType=VARCHAR}");
        }
        
        if (record.getRefreshToken() != null) {
            SET("refresh_token = #{refreshToken,jdbcType=VARCHAR}");
        }
        
        if (record.getToken() != null) {
            SET("token = #{token,jdbcType=LONGVARBINARY}");
        }
        
        if (record.getAuthentication() != null) {
            SET("authentication = #{authentication,jdbcType=LONGVARBINARY}");
        }
        
        WHERE("authentication_id = #{authenticationId,jdbcType=VARCHAR}");
        
        return SQL();
    }
}