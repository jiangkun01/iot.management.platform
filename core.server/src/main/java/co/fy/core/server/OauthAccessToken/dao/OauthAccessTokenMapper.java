package co.fy.core.server.OauthAccessToken.dao;

import co.fy.core.server.OauthAccessToken.model.OauthAccessToken;
import co.fy.core.server.OauthAccessToken.model.OauthAccessTokenWithBLOBs;
import org.apache.ibatis.annotations.*;
import org.apache.ibatis.type.JdbcType;
@Mapper
public interface OauthAccessTokenMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table oauth_access_token
     *
     * @mbggenerated Tue Dec 05 09:45:41 CST 2017
     */
    @Delete({
        "delete from oauth_access_token",
        "where authentication_id = #{authenticationId,jdbcType=VARCHAR}"
    })
    int deleteByPrimaryKey(String authenticationId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table oauth_access_token
     *
     * @mbggenerated Tue Dec 05 09:45:41 CST 2017
     */
    @Insert({
        "insert into oauth_access_token (authentication_id, token_id, ",
        "user_name, client_id, ",
        "refresh_token, token, ",
        "authentication)",
        "values (#{authenticationId,jdbcType=VARCHAR}, #{tokenId,jdbcType=VARCHAR}, ",
        "#{userName,jdbcType=VARCHAR}, #{clientId,jdbcType=VARCHAR}, ",
        "#{refreshToken,jdbcType=VARCHAR}, #{token,jdbcType=LONGVARBINARY}, ",
        "#{authentication,jdbcType=LONGVARBINARY})"
    })
    int insert(OauthAccessTokenWithBLOBs record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table oauth_access_token
     *
     * @mbggenerated Tue Dec 05 09:45:41 CST 2017
     */
    @InsertProvider(type=OauthAccessTokenSqlProvider.class, method="insertSelective")
    int insertSelective(OauthAccessTokenWithBLOBs record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table oauth_access_token
     *
     * @mbggenerated Tue Dec 05 09:45:41 CST 2017
     */
    @Select({
        "select",
        "authentication_id, token_id, user_name, client_id, refresh_token, token, authentication",
        "from oauth_access_token",
        "where authentication_id = #{authenticationId,jdbcType=VARCHAR}"
    })
    @Results({
        @Result(column="authentication_id", property="authenticationId", jdbcType= JdbcType.VARCHAR, id=true),
        @Result(column="token_id", property="tokenId", jdbcType= JdbcType.VARCHAR),
        @Result(column="user_name", property="userName", jdbcType= JdbcType.VARCHAR),
        @Result(column="client_id", property="clientId", jdbcType= JdbcType.VARCHAR),
        @Result(column="refresh_token", property="refreshToken", jdbcType= JdbcType.VARCHAR),
        @Result(column="token", property="token", jdbcType= JdbcType.LONGVARBINARY),
        @Result(column="authentication", property="authentication", jdbcType= JdbcType.LONGVARBINARY)
    })
    OauthAccessTokenWithBLOBs selectByPrimaryKey(String authenticationId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table oauth_access_token
     *
     * @mbggenerated Tue Dec 05 09:45:41 CST 2017
     */
    @UpdateProvider(type=OauthAccessTokenSqlProvider.class, method="updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(OauthAccessTokenWithBLOBs record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table oauth_access_token
     *
     * @mbggenerated Tue Dec 05 09:45:41 CST 2017
     */
    @Update({
        "update oauth_access_token",
        "set token_id = #{tokenId,jdbcType=VARCHAR},",
          "user_name = #{userName,jdbcType=VARCHAR},",
          "client_id = #{clientId,jdbcType=VARCHAR},",
          "refresh_token = #{refreshToken,jdbcType=VARCHAR},",
          "token = #{token,jdbcType=LONGVARBINARY},",
          "authentication = #{authentication,jdbcType=LONGVARBINARY}",
        "where authentication_id = #{authenticationId,jdbcType=VARCHAR}"
    })
    int updateByPrimaryKeyWithBLOBs(OauthAccessTokenWithBLOBs record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table oauth_access_token
     *
     * @mbggenerated Tue Dec 05 09:45:41 CST 2017
     */
    @Update({
        "update oauth_access_token",
        "set token_id = #{tokenId,jdbcType=VARCHAR},",
          "user_name = #{userName,jdbcType=VARCHAR},",
          "client_id = #{clientId,jdbcType=VARCHAR},",
          "refresh_token = #{refreshToken,jdbcType=VARCHAR}",
        "where authentication_id = #{authenticationId,jdbcType=VARCHAR}"
    })
    int updateByPrimaryKey(OauthAccessToken record);


    @Select({
            "select",
            "authentication_id, token_id, user_name, client_id, refresh_token, token, authentication",
            "from oauth_access_token",
            "where token_id = #{tokenId,jdbcType=VARCHAR}"
    })
    @Results({
            @Result(column="authentication_id", property="authenticationId", jdbcType= JdbcType.VARCHAR, id=true),
            @Result(column="token_id", property="tokenId", jdbcType= JdbcType.VARCHAR),
            @Result(column="user_name", property="userName", jdbcType= JdbcType.VARCHAR),
            @Result(column="client_id", property="clientId", jdbcType= JdbcType.VARCHAR),
            @Result(column="refresh_token", property="refreshToken", jdbcType= JdbcType.VARCHAR),
            @Result(column="token", property="token", jdbcType= JdbcType.LONGVARBINARY),
            @Result(column="authentication", property="authentication", jdbcType= JdbcType.LONGVARBINARY)
    })
    OauthAccessTokenWithBLOBs selectByPrimaryKeyToken(String tokenId);

}